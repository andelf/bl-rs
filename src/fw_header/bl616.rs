/* automatically generated by rust-bindgen 0.64.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 120300;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
// #[repr()]
#[derive(Debug, Copy, Clone)]
pub struct spi_flash_cfg_t {
    #[doc = "< Serail flash interface mode,bit0-3:IF mode,bit4:unwrap"]
    pub ioMode: u8,
    #[doc = "< Support continuous read mode,bit0:continuous read mode support,bit1:read mode cfg"]
    pub cReadSupport: u8,
    #[doc = "< SPI clock delay,bit0-3:delay,bit4-6:pad delay"]
    pub clkDelay: u8,
    #[doc = "< SPI clock phase invert,bit0:clck invert,bit1:rx invert,bit2-4:pad delay,bit5-7:pad delay"]
    pub clkInvert: u8,
    #[doc = "< Flash enable reset command"]
    pub resetEnCmd: u8,
    #[doc = "< Flash reset command"]
    pub resetCmd: u8,
    #[doc = "< Flash reset continuous read command"]
    pub resetCreadCmd: u8,
    #[doc = "< Flash reset continuous read command size"]
    pub resetCreadCmdSize: u8,
    #[doc = "< JEDEC ID command"]
    pub jedecIdCmd: u8,
    #[doc = "< JEDEC ID command dummy clock"]
    pub jedecIdCmdDmyClk: u8,
    #[doc = "< Enter 32-bits addr command"]
    pub enter32BitsAddrCmd: u8,
    #[doc = "< Exit 32-bits addr command"]
    pub exit32BitsAddrCmd: u8,
    #[doc = "< *1024bytes"]
    pub sectorSize: u8,
    #[doc = "< Manufacturer ID"]
    pub mid: u8,
    #[doc = "< Page size"]
    pub pageSize: u16,
    #[doc = "< Chip erase cmd"]
    pub chipEraseCmd: u8,
    #[doc = "< Sector erase command"]
    pub sectorEraseCmd: u8,
    #[doc = "< Block 32K erase command,some Micron not support"]
    pub blk32EraseCmd: u8,
    #[doc = "< Block 64K erase command"]
    pub blk64EraseCmd: u8,
    #[doc = "< Need before every erase or program"]
    pub writeEnableCmd: u8,
    #[doc = "< Page program cmd"]
    pub pageProgramCmd: u8,
    #[doc = "< QIO page program cmd"]
    pub qpageProgramCmd: u8,
    #[doc = "< QIO page program address mode"]
    pub qppAddrMode: u8,
    #[doc = "< Fast read command"]
    pub fastReadCmd: u8,
    #[doc = "< Fast read command dummy clock"]
    pub frDmyClk: u8,
    #[doc = "< QPI fast read command"]
    pub qpiFastReadCmd: u8,
    #[doc = "< QPI fast read command dummy clock"]
    pub qpiFrDmyClk: u8,
    #[doc = "< Fast read dual output command"]
    pub fastReadDoCmd: u8,
    #[doc = "< Fast read dual output command dummy clock"]
    pub frDoDmyClk: u8,
    #[doc = "< Fast read dual io comamnd"]
    pub fastReadDioCmd: u8,
    #[doc = "< Fast read dual io command dummy clock"]
    pub frDioDmyClk: u8,
    #[doc = "< Fast read quad output comamnd"]
    pub fastReadQoCmd: u8,
    #[doc = "< Fast read quad output comamnd dummy clock"]
    pub frQoDmyClk: u8,
    #[doc = "< Fast read quad io comamnd"]
    pub fastReadQioCmd: u8,
    #[doc = "< Fast read quad io comamnd dummy clock"]
    pub frQioDmyClk: u8,
    #[doc = "< QPI fast read quad io comamnd"]
    pub qpiFastReadQioCmd: u8,
    #[doc = "< QPI fast read QIO dummy clock"]
    pub qpiFrQioDmyClk: u8,
    #[doc = "< QPI program command"]
    pub qpiPageProgramCmd: u8,
    #[doc = "< Enable write reg"]
    pub writeVregEnableCmd: u8,
    #[doc = "< Write enable register index"]
    pub wrEnableIndex: u8,
    #[doc = "< Quad mode enable register index"]
    pub qeIndex: u8,
    #[doc = "< Busy status register index"]
    pub busyIndex: u8,
    #[doc = "< Write enable bit pos"]
    pub wrEnableBit: u8,
    #[doc = "< Quad enable bit pos"]
    pub qeBit: u8,
    #[doc = "< Busy status bit pos"]
    pub busyBit: u8,
    #[doc = "< Register length of write enable"]
    pub wrEnableWriteRegLen: u8,
    #[doc = "< Register length of write enable status"]
    pub wrEnableReadRegLen: u8,
    #[doc = "< Register length of contain quad enable"]
    pub qeWriteRegLen: u8,
    #[doc = "< Register length of contain quad enable status"]
    pub qeReadRegLen: u8,
    #[doc = "< Release power down command"]
    pub releasePowerDown: u8,
    #[doc = "< Register length of contain busy status"]
    pub busyReadRegLen: u8,
    #[doc = "< Read register command buffer"]
    pub readRegCmd: [u8; 4usize],
    #[doc = "< Write register command buffer"]
    pub writeRegCmd: [u8; 4usize],
    #[doc = "< Enter qpi command"]
    pub enterQpi: u8,
    #[doc = "< Exit qpi command"]
    pub exitQpi: u8,
    #[doc = "< Config data for continuous read mode"]
    pub cReadMode: u8,
    #[doc = "< Config data for exit continuous read mode"]
    pub cRExit: u8,
    #[doc = "< Enable burst wrap command"]
    pub burstWrapCmd: u8,
    #[doc = "< Enable burst wrap command dummy clock"]
    pub burstWrapCmdDmyClk: u8,
    #[doc = "< Data and address mode for this command"]
    pub burstWrapDataMode: u8,
    #[doc = "< Data to enable burst wrap"]
    pub burstWrapData: u8,
    #[doc = "< Disable burst wrap command"]
    pub deBurstWrapCmd: u8,
    #[doc = "< Disable burst wrap command dummy clock"]
    pub deBurstWrapCmdDmyClk: u8,
    #[doc = "< Data and address mode for this command"]
    pub deBurstWrapDataMode: u8,
    #[doc = "< Data to disable burst wrap"]
    pub deBurstWrapData: u8,
    #[doc = "< 4K erase time"]
    pub timeEsector: u16,
    #[doc = "< 32K erase time"]
    pub timeE32k: u16,
    #[doc = "< 64K erase time"]
    pub timeE64k: u16,
    #[doc = "< Page program time"]
    pub timePagePgm: u16,
    #[doc = "< Chip erase time in ms"]
    pub timeCe: u16,
    #[doc = "< Release power down command delay time for wake up"]
    pub pdDelay: u8,
    #[doc = "< QE set data"]
    pub qeData: u8,
}
#[test]
fn bindgen_test_layout_spi_flash_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<spi_flash_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<spi_flash_cfg_t>(),
        84usize,
        concat!("Size of: ", stringify!(spi_flash_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<spi_flash_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(spi_flash_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(ioMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cReadSupport) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(cReadSupport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clkDelay) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(clkDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clkInvert) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(clkInvert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resetEnCmd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(resetEnCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resetCmd) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(resetCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resetCreadCmd) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(resetCreadCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resetCreadCmdSize) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(resetCreadCmdSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jedecIdCmd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(jedecIdCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jedecIdCmdDmyClk) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(jedecIdCmdDmyClk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enter32BitsAddrCmd) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(enter32BitsAddrCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit32BitsAddrCmd) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(exit32BitsAddrCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectorSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(sectorSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mid) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(mid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageSize) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(pageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chipEraseCmd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(chipEraseCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sectorEraseCmd) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(sectorEraseCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blk32EraseCmd) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(blk32EraseCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blk64EraseCmd) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(blk64EraseCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeEnableCmd) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(writeEnableCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageProgramCmd) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(pageProgramCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qpageProgramCmd) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qpageProgramCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qppAddrMode) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qppAddrMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fastReadCmd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(fastReadCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frDmyClk) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(frDmyClk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qpiFastReadCmd) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qpiFastReadCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qpiFrDmyClk) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qpiFrDmyClk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fastReadDoCmd) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(fastReadDoCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frDoDmyClk) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(frDoDmyClk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fastReadDioCmd) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(fastReadDioCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frDioDmyClk) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(frDioDmyClk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fastReadQoCmd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(fastReadQoCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frQoDmyClk) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(frQoDmyClk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fastReadQioCmd) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(fastReadQioCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frQioDmyClk) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(frQioDmyClk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qpiFastReadQioCmd) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qpiFastReadQioCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qpiFrQioDmyClk) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qpiFrQioDmyClk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qpiPageProgramCmd) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qpiPageProgramCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeVregEnableCmd) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(writeVregEnableCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrEnableIndex) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(wrEnableIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qeIndex) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busyIndex) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(busyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrEnableBit) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(wrEnableBit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qeBit) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qeBit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busyBit) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(busyBit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrEnableWriteRegLen) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(wrEnableWriteRegLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrEnableReadRegLen) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(wrEnableReadRegLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qeWriteRegLen) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qeWriteRegLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qeReadRegLen) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qeReadRegLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).releasePowerDown) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(releasePowerDown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busyReadRegLen) as usize - ptr as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(busyReadRegLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readRegCmd) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(readRegCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeRegCmd) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(writeRegCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enterQpi) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(enterQpi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exitQpi) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(exitQpi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cReadMode) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(cReadMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cRExit) as usize - ptr as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(cRExit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).burstWrapCmd) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(burstWrapCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).burstWrapCmdDmyClk) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(burstWrapCmdDmyClk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).burstWrapDataMode) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(burstWrapDataMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).burstWrapData) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(burstWrapData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deBurstWrapCmd) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(deBurstWrapCmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deBurstWrapCmdDmyClk) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(deBurstWrapCmdDmyClk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deBurstWrapDataMode) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(deBurstWrapDataMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deBurstWrapData) as usize - ptr as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(deBurstWrapData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeEsector) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(timeEsector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeE32k) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(timeE32k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeE64k) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(timeE64k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timePagePgm) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(timePagePgm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeCe) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(timeCe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdDelay) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(pdDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qeData) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_flash_cfg_t),
            "::",
            stringify!(qeData)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct boot_flash_cfg_t {
    pub magiccode: u32,
    pub cfg: spi_flash_cfg_t,
    pub crc32: u32,
}
#[test]
fn bindgen_test_layout_boot_flash_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<boot_flash_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<boot_flash_cfg_t>(),
        92usize,
        concat!("Size of: ", stringify!(boot_flash_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<boot_flash_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(boot_flash_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magiccode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_flash_cfg_t),
            "::",
            stringify!(magiccode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_flash_cfg_t),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc32) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_flash_cfg_t),
            "::",
            stringify!(crc32)
        )
    );
}
#[repr(C, packed(4))]
// #[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct sys_clk_cfg_t {
    pub xtal_type: u8,
    pub mcu_clk: u8,
    pub mcu_clk_div: u8,
    pub mcu_bclk_div: u8,
    pub mcu_pbclk_div: u8,
    pub emi_clk: u8,
    pub emi_clk_div: u8,
    pub flash_clk_type: u8,
    pub flash_clk_div: u8,
    pub wifipll_pu: u8,
    pub aupll_pu: u8,
    pub rsvd0: u8,
}
#[test]
fn bindgen_test_layout_sys_clk_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<sys_clk_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sys_clk_cfg_t>(),
        12usize,
        concat!("Size of: ", stringify!(sys_clk_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sys_clk_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sys_clk_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xtal_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(xtal_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcu_clk) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(mcu_clk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcu_clk_div) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(mcu_clk_div)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcu_bclk_div) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(mcu_bclk_div)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mcu_pbclk_div) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(mcu_pbclk_div)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).emi_clk) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(emi_clk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).emi_clk_div) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(emi_clk_div)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_clk_type) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(flash_clk_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_clk_div) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(flash_clk_div)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wifipll_pu) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(wifipll_pu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aupll_pu) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(aupll_pu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsvd0) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(sys_clk_cfg_t),
            "::",
            stringify!(rsvd0)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct boot_clk_cfg_t {
    pub magiccode: u32,
    pub cfg: sys_clk_cfg_t,
    pub crc32: u32,
}
#[test]
fn bindgen_test_layout_boot_clk_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<boot_clk_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<boot_clk_cfg_t>(),
        20usize,
        concat!("Size of: ", stringify!(boot_clk_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<boot_clk_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(boot_clk_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magiccode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_clk_cfg_t),
            "::",
            stringify!(magiccode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_clk_cfg_t),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc32) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_clk_cfg_t),
            "::",
            stringify!(crc32)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct boot_basic_cfg_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub group_image_offset: u32,
    pub aes_region_len: u32,
    pub img_len_cnt: u32,
    pub hash: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_boot_basic_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<boot_basic_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<boot_basic_cfg_t>(),
        48usize,
        concat!("Size of: ", stringify!(boot_basic_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<boot_basic_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(boot_basic_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group_image_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_basic_cfg_t),
            "::",
            stringify!(group_image_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aes_region_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_basic_cfg_t),
            "::",
            stringify!(aes_region_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).img_len_cnt) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_basic_cfg_t),
            "::",
            stringify!(img_len_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_basic_cfg_t),
            "::",
            stringify!(hash)
        )
    );
}
impl boot_basic_cfg_t {
    #[inline]
    pub fn sign_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sign_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn encrypt_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_encrypt_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn key_sel(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_key_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn xts_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xts_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn aes_region_lock(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aes_region_lock(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_segment(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_segment(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rsvd_0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rsvd_0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rsvd_1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rsvd_1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_master_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_master_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn notload_in_bootrom(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_notload_in_bootrom(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn crc_ignore(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_crc_ignore(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hash_ignore(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hash_ignore(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn power_on_mm(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_power_on_mm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn em_sel(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_em_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn cmds_en(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmds_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmds_wrap_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_cmds_wrap_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn cmds_wrap_len(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_cmds_wrap_len(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn icache_invalid(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_icache_invalid(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dcache_invalid(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dcache_invalid(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rsvd_3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rsvd_3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sign_type: u32,
        encrypt_type: u32,
        key_sel: u32,
        xts_mode: u32,
        aes_region_lock: u32,
        no_segment: u32,
        rsvd_0: u32,
        rsvd_1: u32,
        cpu_master_id: u32,
        notload_in_bootrom: u32,
        crc_ignore: u32,
        hash_ignore: u32,
        power_on_mm: u32,
        em_sel: u32,
        cmds_en: u32,
        cmds_wrap_mode: u32,
        cmds_wrap_len: u32,
        icache_invalid: u32,
        dcache_invalid: u32,
        rsvd_3: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let sign_type: u32 = unsafe { ::std::mem::transmute(sign_type) };
            sign_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let encrypt_type: u32 = unsafe { ::std::mem::transmute(encrypt_type) };
            encrypt_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let key_sel: u32 = unsafe { ::std::mem::transmute(key_sel) };
            key_sel as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let xts_mode: u32 = unsafe { ::std::mem::transmute(xts_mode) };
            xts_mode as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let aes_region_lock: u32 = unsafe { ::std::mem::transmute(aes_region_lock) };
            aes_region_lock as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let no_segment: u32 = unsafe { ::std::mem::transmute(no_segment) };
            no_segment as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let rsvd_0: u32 = unsafe { ::std::mem::transmute(rsvd_0) };
            rsvd_0 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rsvd_1: u32 = unsafe { ::std::mem::transmute(rsvd_1) };
            rsvd_1 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 4u8, {
            let cpu_master_id: u32 = unsafe { ::std::mem::transmute(cpu_master_id) };
            cpu_master_id as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let notload_in_bootrom: u32 = unsafe { ::std::mem::transmute(notload_in_bootrom) };
            notload_in_bootrom as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let crc_ignore: u32 = unsafe { ::std::mem::transmute(crc_ignore) };
            crc_ignore as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let hash_ignore: u32 = unsafe { ::std::mem::transmute(hash_ignore) };
            hash_ignore as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let power_on_mm: u32 = unsafe { ::std::mem::transmute(power_on_mm) };
            power_on_mm as u64
        });
        __bindgen_bitfield_unit.set(19usize, 3u8, {
            let em_sel: u32 = unsafe { ::std::mem::transmute(em_sel) };
            em_sel as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let cmds_en: u32 = unsafe { ::std::mem::transmute(cmds_en) };
            cmds_en as u64
        });
        __bindgen_bitfield_unit.set(23usize, 2u8, {
            let cmds_wrap_mode: u32 = unsafe { ::std::mem::transmute(cmds_wrap_mode) };
            cmds_wrap_mode as u64
        });
        __bindgen_bitfield_unit.set(25usize, 4u8, {
            let cmds_wrap_len: u32 = unsafe { ::std::mem::transmute(cmds_wrap_len) };
            cmds_wrap_len as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let icache_invalid: u32 = unsafe { ::std::mem::transmute(icache_invalid) };
            icache_invalid as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let dcache_invalid: u32 = unsafe { ::std::mem::transmute(dcache_invalid) };
            dcache_invalid as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let rsvd_3: u32 = unsafe { ::std::mem::transmute(rsvd_3) };
            rsvd_3 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct boot_cpu_cfg_t {
    pub config_enable: u8,
    pub halt_cpu: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub rsvd: u8,
    pub image_address_offset: u32,
    pub rsvd1: u32,
    pub msp_val: u32,
}
#[test]
fn bindgen_test_layout_boot_cpu_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<boot_cpu_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<boot_cpu_cfg_t>(),
        16usize,
        concat!("Size of: ", stringify!(boot_cpu_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<boot_cpu_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(boot_cpu_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_cpu_cfg_t),
            "::",
            stringify!(config_enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).halt_cpu) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_cpu_cfg_t),
            "::",
            stringify!(halt_cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsvd) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_cpu_cfg_t),
            "::",
            stringify!(rsvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_address_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_cpu_cfg_t),
            "::",
            stringify!(image_address_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsvd1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_cpu_cfg_t),
            "::",
            stringify!(rsvd1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msp_val) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_cpu_cfg_t),
            "::",
            stringify!(msp_val)
        )
    );
}
impl boot_cpu_cfg_t {
    #[inline]
    pub fn cache_enable(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cache_enable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cache_wa(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cache_wa(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cache_wb(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cache_wb(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cache_wt(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cache_wt(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cache_way_dis(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_cache_way_dis(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cache_enable: u8,
        cache_wa: u8,
        cache_wb: u8,
        cache_wt: u8,
        cache_way_dis: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cache_enable: u8 = unsafe { ::std::mem::transmute(cache_enable) };
            cache_enable as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cache_wa: u8 = unsafe { ::std::mem::transmute(cache_wa) };
            cache_wa as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let cache_wb: u8 = unsafe { ::std::mem::transmute(cache_wb) };
            cache_wb as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let cache_wt: u8 = unsafe { ::std::mem::transmute(cache_wt) };
            cache_wt as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let cache_way_dis: u8 = unsafe { ::std::mem::transmute(cache_way_dis) };
            cache_way_dis as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct aesiv_cfg_t {
    pub aesiv: [u8; 16usize],
    pub crc32: u32,
}
#[test]
fn bindgen_test_layout_aesiv_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<aesiv_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<aesiv_cfg_t>(),
        20usize,
        concat!("Size of: ", stringify!(aesiv_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<aesiv_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(aesiv_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aesiv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(aesiv_cfg_t),
            "::",
            stringify!(aesiv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc32) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(aesiv_cfg_t),
            "::",
            stringify!(crc32)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct pkey_cfg_t {
    pub eckeyx: [u8; 32usize],
    pub eckeyy: [u8; 32usize],
    pub crc32: u32,
}
#[test]
fn bindgen_test_layout_pkey_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<pkey_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pkey_cfg_t>(),
        68usize,
        concat!("Size of: ", stringify!(pkey_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pkey_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pkey_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eckeyx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pkey_cfg_t),
            "::",
            stringify!(eckeyx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eckeyy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pkey_cfg_t),
            "::",
            stringify!(eckeyy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc32) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pkey_cfg_t),
            "::",
            stringify!(crc32)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct sign_cfg_t {
    pub sig_len: u32,
    pub signature: [u8; 32usize],
    pub crc32: u32,
}
#[test]
fn bindgen_test_layout_sign_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<sign_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sign_cfg_t>(),
        40usize,
        concat!("Size of: ", stringify!(sign_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sign_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sign_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sign_cfg_t),
            "::",
            stringify!(sig_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sign_cfg_t),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc32) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sign_cfg_t),
            "::",
            stringify!(crc32)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct bootheader_t {
    pub magiccode: u32,
    pub rivison: u32,
    pub flash_cfg: boot_flash_cfg_t,
    pub clk_cfg: boot_clk_cfg_t,
    pub basic_cfg: boot_basic_cfg_t,
    pub cpu_cfg: boot_cpu_cfg_t,
    pub boot2_pt_table_0_rsvd: u32,
    pub boot2_pt_table_1_rsvd: u32,
    pub flash_cfg_table_addr: u32,
    pub flash_cfg_table_len: u32,
    pub rsvd0: [u32; 6usize],
    pub rsvd1: [u32; 6usize],
    pub rsvd: u32,
    pub crc32: u32,
}
#[test]
fn bindgen_test_layout_bootheader_t() {
    const UNINIT: ::std::mem::MaybeUninit<bootheader_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bootheader_t>(),
        256usize,
        concat!("Size of: ", stringify!(bootheader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bootheader_t>(),
        4usize,
        concat!("Alignment of ", stringify!(bootheader_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magiccode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(magiccode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rivison) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(rivison)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_cfg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(flash_cfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clk_cfg) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(clk_cfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basic_cfg) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(basic_cfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_cfg) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(cpu_cfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot2_pt_table_0_rsvd) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(boot2_pt_table_0_rsvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot2_pt_table_1_rsvd) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(boot2_pt_table_1_rsvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_cfg_table_addr) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(flash_cfg_table_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flash_cfg_table_len) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(flash_cfg_table_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsvd0) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(rsvd0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsvd1) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(rsvd1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsvd) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(rsvd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc32) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(bootheader_t),
            "::",
            stringify!(crc32)
        )
    );
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
